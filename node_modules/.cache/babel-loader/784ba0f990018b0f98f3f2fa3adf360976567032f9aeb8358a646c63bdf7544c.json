{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\nvar _jestMatcherUtils = require(\"jest-matcher-utils\");\nvar _utils = require(\"./utils\");\nfunction toHaveTextContent(htmlElement, checkWith) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    normalizeWhitespace: true\n  };\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(htmlElement.textContent) : htmlElement.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)((0, _jestMatcherUtils.matcherHint)(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmpty() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","toHaveTextContent","_jestMatcherUtils","require","_utils","htmlElement","checkWith","options","normalizeWhitespace","checkHtmlElement","textContent","normalize","replace","checkingWithEmptyString","pass","matches","message","to","isNot","getMessage","matcherHint"],"sources":["/Users/aniiaakhmetova/Desktop/React/05-starting-project/node_modules/@testing-library/jest-dom/dist/to-have-text-content.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\n\nvar _jestMatcherUtils = require(\"jest-matcher-utils\");\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveTextContent(htmlElement, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(htmlElement.textContent) : htmlElement.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)((0, _jestMatcherUtils.matcherHint)(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmpty() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAE7C,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAErD,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE/B,SAASF,iBAAiB,CAACI,WAAW,EAAEC,SAAS,EAE9C;EAAA,IAFgDC,OAAO,uEAAG;IAC3DC,mBAAmB,EAAE;EACvB,CAAC;EACC,CAAC,CAAC,EAAEJ,MAAM,CAACK,gBAAgB,EAAEJ,WAAW,EAAEJ,iBAAiB,EAAE,IAAI,CAAC;EAClE,MAAMS,WAAW,GAAGH,OAAO,CAACC,mBAAmB,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAACO,SAAS,EAAEN,WAAW,CAACK,WAAW,CAAC,GAAGL,WAAW,CAACK,WAAW,CAACE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEpJ,MAAMC,uBAAuB,GAAGH,WAAW,KAAK,EAAE,IAAIJ,SAAS,KAAK,EAAE;EACtE,OAAO;IACLQ,IAAI,EAAE,CAACD,uBAAuB,IAAI,CAAC,CAAC,EAAET,MAAM,CAACW,OAAO,EAAEL,WAAW,EAAEJ,SAAS,CAAC;IAC7EU,OAAO,EAAE,MAAM;MACb,MAAMC,EAAE,GAAG,IAAI,CAACC,KAAK,GAAG,QAAQ,GAAG,IAAI;MACvC,OAAO,CAAC,CAAC,EAAEd,MAAM,CAACe,UAAU,EAAE,CAAC,CAAC,EAAEjB,iBAAiB,CAACkB,WAAW,EAAG,GAAE,IAAI,CAACF,KAAK,GAAG,MAAM,GAAG,EAAG,oBAAmB,EAAE,SAAS,EAAE,EAAE,CAAC,EAAEL,uBAAuB,GAAI,wEAAuE,GAAI,oBAAmBI,EAAG,oBAAmB,EAAEX,SAAS,EAAE,UAAU,EAAEI,WAAW,CAAC;IACxT;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}